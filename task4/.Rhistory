p?airs
?pairs
library(lmtest)
library(car)              #uzkraunamos reikalingos bibliotekos
setwd("/task4")                   #nustatoma duomenu direktorija
data=read.csv2("data.csv")        #nuskaitomi duomenys
getwd()
data=read.csv2("data.csv")        #nuskaitomi duomenys
remove_outliers <- function(x) {              # ideja gauta is http://stackoverflow.com/questions/4787332/how-to-remove-outliers-from-a-dataset
qnt <- quantile(x, probs=c(.25, .75), na.rm = T)       #na.rm logical; if true, any NA and NaN's are removed from x before the quantiles are computed.
H <- 1.5 * IQR(x, na.rm = T)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
return(y)
}
newdata=lapply(data,remove_outliers)
newdata=data.frame(newdata)
row.has.na <- apply(newdata, 1, function(x){any(is.na(x))})
newdata<- newdata[!row.has.na,]
mod=lm(newdata$kaina~newdata$plotas + newdata$aukstas+newdata$garsoIzoliacija+newdata$silumosLaidumas+newdata$atstumasIkiPrekybosCentro)
resettest(mod,power=1/2,type="regressor")
resettest(mod,power=2:3,type="regressor")   #nereikia kelti laipsniais kintamuosius
qnt <- quantile(data, probs=c(.25, .75), na.rm = T)
qnt
View(data)
data
quantile
?quantile
mod=lm(newdata$kaina~newdata$plotas + newdata$aukstas+newdata$garsoIzoliacija+newdata$silumosLaidumas+newdata$atstumasIkiPrekybosCentro)
summary(mod) # du nereiksmingus rodo
resettest(mod,power=2:3,1/2,type="regressor")   #nereikia kelti laipsniais kintamuosius
resettest(mod,power=1/2,type="regressor")   #nereikia kvadratines saknies
resettest(mod,power=2:3,1/2,type="regressor")   #nereikia kelti laipsniais kintamuosius
resettest(mod,power=1/2,type="regressor")   #nereikia kvadratines saknies
?kable
summary(mod)$coef
kable(summary(mod)$coef, digits=2) # du nereiksmingus rodo
kable(summary(mod)$coef, digits=2) # du nereiksmingus rodo
library(knitr)
kable(summary(mod)$coef, digits=2) # du nereiksmingus rodo
mod=lm(newdata$kaina~newdata$plotas + newdata$aukstas+newdata$garsoIzoliacija+newdata$silumosLaidumas+newdata$atstumasIkiPrekybosCentro)
kable(summary(mod)$coef, digits=2) # du nereiksmingus rodo
a=newdata$aukstas==1
mod11=lm(kaina~-1+plotas +a+garsoIzoliacija,data=newdata)
summary(mod11)
a
b=a==F
b
mod11=lm(kaina~-1+plotas +b+garsoIzoliacija,data=newdata)
summary(mod11)
x= c(NA,2,3,4,5,NA)
x
x>2
x[is.na(x)]
which(is.na(x))
with(duom,plot(AP))
duom=data
with(duom,plot(AP))
with(duom,plot(kaina))
kable(resettest(mod,power=2:3,type="regressor")$p.value
)
library(knitr)
kable(resettest(mod,power=2:3,type="regressor")$p.value,digits=2)
library(car)              #uzkraunamos reikalingos bibliotekos
library(knitr)
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
library(lmtest)
library(car)              #uzkraunamos reikalingos bibliotekos
library(knitr)
kable(resettest(mod,power=2:3,type="regressor")$p.value,digits=2)
kable(reset.test(mod,power=2:3,type="regressor")$p.value,digits=2)
resettest(mod,power=2:3,type="regressor")   #
?resettest
library(lmtest)
resettest(mod,power=2:3,type="regressor")   #nereikia kelti laipsniais kintamuosius
kable(reset.test(mod,power=2:3,type="regressor")$p.value,digits=2)
kable(resettest(mod,power=2:3,type="regressor")$p.value,digits=2)   #nereikia kelti laipsniais kintamuosius, nes p reikšmė < 0,05
kable(resettest(mod,power=2:3,type="regressor"),digits=2)   #nereikia kelti laipsniais kintamuosius, nes p reikšmė < 0,05
mod=lm(newdata$kaina~newdata$plotas + newdata$aukstas+newdata$garsoIzoliacija+newdata$silumosLaidumas+newdata$atstumasIkiPrekybosCentro)
mod=lm(newdata$kaina~newdata$plotas + newdata$aukstas+newdata$garsoIzoliacija+newdata$silumosLaidumas+newdata$atstumasIkiPrekybosCentro)
kable(summary(mod)$coef, digits=2) # du nereiksmingus rodo
kable(resettest(mod,power=2:3,type="regressor"),digits=2)   #nereikia kelti laipsniais kintamuosius, nes p reikšmė < 0,05
kable(resettest(mod,power=2:3,type="regressor")$p.value,digits=2)   #nereikia kelti laipsniais kintamuosius, nes p reikšmė < 0,05
resettest(mod,power=2:3,type="regressor")$p.value   #nereikia kelti laipsniais kintamuosius, nes p reikšmė < 0,05
AIC(mod2)
mod2=lm(kaina~-1+plotas +aukstas+garsoIzoliacija,data=newdata) #antras modelis, kuriame buvo išmesti nereikšmingi duomenys.
mod=lm(newdata$kaina~newdata$plotas + newdata$aukstas+newdata$garsoIzoliacija+newdata$silumosLaidumas+newdata$atstumasIkiPrekybosCentro)
AIC(mod)
AIC(mod2)
mod2=lm(kaina~plotas +aukstas+garsoIzoliacija,data=newdata) #antras modelis, kuriame buvo išmesti nereikšmingi duomenys.
AIC(mod)
AIC(mod2)
influential <- as.numeric(names(cooksd)[(cooksd > 4*mean(cooksd, na.rm=T))])
data=read.csv2("data.csv")        #nuskaitomi duomenys
remove_outliers <- function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = T)       #na.rm logical; if true, any NA and NaN's are removed
#from x before the quantiles are computed.  Randami 25% ir 75% kvantiliai
H <- 1.5 * IQR(x, na.rm = T)      #randamas atstumas, kurį reikia pridėti prie 75% kvantilio ir atimti iš
#25% kvantilio, kad rasti ribą, nuo kurio galime teigti, kad duomenys už tos ribos bus išskirtys.
y <- x
y[x < (qnt[1] - H)] <- NA                  # duomenys, peržengiančios nustatytą ribą ir yra pakaičiami į NA
y[x > (qnt[2] + H)] <- NA
return(y)
}
newdata=lapply(data,remove_outliers)         # ieškoma išskirtys visose duomenų stulpeliuose
newdata=data.frame(newdata)                  # list'as paverčiamas vėl į data frame tipą
row.has.na <- apply(newdata, 1, function(x){any(is.na(x))})    #tikrina visas duomenų eilutes ir jei randa
#ištrintą reikšmę (t.y. pakeistą į NA), tada pažymime, kad ta eilutė turi išskirtį
newdata<- newdata[!row.has.na,]    #perankame duomenų eilutes, kurios neturi išskirčiu ir pavadiname šią
#duomenų lentelę newdata
?abline
?mean
names(cooksd)
ooksd <- cooks.distance(mod11)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels, na.rm  a logical value indicating whether NA values should be stripped before the computation proceeds.
influential <- as.numeric(names(cooksd)[(cooksd > 4*mean(cooksd, na.rm=T))])
names(cooksd)
cooksd <- cooks.distance(mod2)
names(cooksd)
